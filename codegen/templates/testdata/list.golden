# Generated by goldga. DO NOT EDIT.
[snapshots]
"List client endpoint code generation when generating list endpoints client should be able to generate list children methods" = '''
(string) (len=1504) "func ListEntitlementsPageSortBy(site string, offset string, sortBy *SortBy) ([]Entitlement, string, error) {\n\tclient := fiber.AcquireClient()\n\tdefer fiber.ReleaseClient(client)\n\n\tparsedUrl, err := url.Parse(\"https://\" + site + \".\" + \"\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\t\n\tparsedUrl.Query().Add(\"offset\", offset)\n\tif sortBy != nil && sortBy.Asc {\n\t\tparsedUrl.Query().Add(\"sort_by[asc]\", sortBy.Name)\n\t}\n\n\tif sortBy != nil && !sortBy.Asc {\n\t\tparsedUrl.Query().Add(\"sort_by[desc]\", sortBy.Name)\n\t}\n\n\tstatusCode, content, errs := client.Get(parsedUrl.String()).MaxRedirectsCount(5).Timeout(time.Second * 10).Bytes()\n\tif len(errs) > 0 || statusCode != 200 {\n\t\treturn nil, \"\", fmt.Errorf(\"get failed, status code: %d, body: %s\", statusCode, content)\n\t}\n    \t\n\ttype EntitlementListItem struct {\n\t\tEntitlement Entitlement `json:\"Entitlement\"`\n\t}\n\n    type EntitlementPage struct {\n        List       []EntitlementListItem `json:\"list\"`\n        NextOffset string `json:\"next_offset,omitempty\"`\n    }\n\n\tentries := EntitlementPage{\n\t\tList:       make([]EntitlementListItem, 0, 10),\n\t\tNextOffset: \"\",\n\t}\n\n\terr = json.Unmarshal(content, &entries)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\t\n\tresult := make([]Entitlement, 0, len(entries.List))\n\tfor _, r := range entries.List {\n\t\tresult = append(result, r.Entitlement)\n\t}\n\n\treturn result, entries.NextOffset, nil\n}\n\nfunc ListEntitlementsPage(url string, offset string) ([]Entitlement, string, error) {\n\treturn ListEntitlementsPageSortBy(url, offset, nil)\n}\n"
'''
"List client endpoint code generation when generating list endpoints client should be able to generate list methods" = '''
(string) (len=1504) "func ListEntitlementsPageSortBy(site string, offset string, sortBy *SortBy) ([]Entitlement, string, error) {\n\tclient := fiber.AcquireClient()\n\tdefer fiber.ReleaseClient(client)\n\n\tparsedUrl, err := url.Parse(\"https://\" + site + \".\" + \"\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\t\n\tparsedUrl.Query().Add(\"offset\", offset)\n\tif sortBy != nil && sortBy.Asc {\n\t\tparsedUrl.Query().Add(\"sort_by[asc]\", sortBy.Name)\n\t}\n\n\tif sortBy != nil && !sortBy.Asc {\n\t\tparsedUrl.Query().Add(\"sort_by[desc]\", sortBy.Name)\n\t}\n\n\tstatusCode, content, errs := client.Get(parsedUrl.String()).MaxRedirectsCount(5).Timeout(time.Second * 10).Bytes()\n\tif len(errs) > 0 || statusCode != 200 {\n\t\treturn nil, \"\", fmt.Errorf(\"get failed, status code: %d, body: %s\", statusCode, content)\n\t}\n    \t\n\ttype EntitlementListItem struct {\n\t\tEntitlement Entitlement `json:\"Entitlement\"`\n\t}\n\n    type EntitlementPage struct {\n        List       []EntitlementListItem `json:\"list\"`\n        NextOffset string `json:\"next_offset,omitempty\"`\n    }\n\n\tentries := EntitlementPage{\n\t\tList:       make([]EntitlementListItem, 0, 10),\n\t\tNextOffset: \"\",\n\t}\n\n\terr = json.Unmarshal(content, &entries)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\t\n\tresult := make([]Entitlement, 0, len(entries.List))\n\tfor _, r := range entries.List {\n\t\tresult = append(result, r.Entitlement)\n\t}\n\n\treturn result, entries.NextOffset, nil\n}\n\nfunc ListEntitlementsPage(url string, offset string) ([]Entitlement, string, error) {\n\treturn ListEntitlementsPageSortBy(url, offset, nil)\n}\n"
'''
